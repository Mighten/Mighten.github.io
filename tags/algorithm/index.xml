<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Mighten&#39;s Blog</title>
    <link>https://mighten.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on Mighten&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Mighten Dai</copyright>
    <lastBuildDate>Wed, 05 Apr 2023 22:22:00 +0800</lastBuildDate><atom:link href="https://mighten.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linked List</title>
      <link>https://mighten.github.io/2023/04/linked-list/</link>
      <pubDate>Wed, 05 Apr 2023 22:22:00 +0800</pubDate>
      
      <guid>https://mighten.github.io/2023/04/linked-list/</guid>
      <description>
        
          
            &lt;p&gt;Today, let&#39;s talk about &lt;strong&gt;Linked List&lt;/strong&gt; algorithms that are frequently used.&lt;/p&gt;
&lt;p&gt;A Linked List is a &lt;em&gt;data structure&lt;/em&gt; that stores data into a series of &lt;em&gt;connected nodes&lt;/em&gt;, and thus it can be dynamically allocated. For each node, it contains 2 fields: the &lt;code&gt;val&lt;/code&gt; that stores data, and the &lt;code&gt;next&lt;/code&gt; that points to the next node.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Binary Tree NonRecursive InOrder</title>
      <link>https://mighten.github.io/2022/05/binary-tree-nonrecursive-inorder/</link>
      <pubDate>Mon, 16 May 2022 22:37:50 +0800</pubDate>
      
      <guid>https://mighten.github.io/2022/05/binary-tree-nonrecursive-inorder/</guid>
      <description>
        
          
            &lt;p&gt;Hi there, let&#39;s talk about how to nonrecursively do a In-Order traversal for a Binary Tree.&lt;/p&gt;
&lt;p&gt;A Binary Tree consists of 3 parts: the node itself, pointer to the left child, pointer to the right child.&lt;/p&gt;
&lt;p&gt;An In-Order Traversal is to access the leftmost child firstly, then the node itself, and finally the right child.&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
